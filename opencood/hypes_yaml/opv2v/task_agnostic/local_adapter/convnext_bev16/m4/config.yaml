name: m4_V2XVIT_adapter
root_dir: "dataset/OPV2V/train"
validate_dir: "dataset/OPV2V/validate"
test_dir: "dataset/OPV2V/test"

yaml_parsers: 
  m4:
    "load_general_params"
  m0:
    "load_general_params"

train_params:
  batch_size: &batch_size 1
  epoches: 5
  eval_freq: 1
  save_freq: 1
  max_cav: 5

comm_range: 70
input_source: ['lidar']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-140.8, -38.4, -3, 140.8, 38.4, 1] # must be divisible by 16


heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m4"
  protocol_modality: &protocol_modality "m0"
  mapping_dict:
    m1: m4
    m2: m4
    m3: m4
    m4: m4
  modality_setting:
    m0:
      sensor_type: &sensor_type_m0 'lidar'
      core_method: &core_method_m0 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m0 [0.4, 0.4, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: &cav_lidar_m0 [-102.4, -102.4, -3, 102.4, 102.4, 1] 

      postprocess:
        core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
        gt_range: *cav_lidar_m0
        voxel_size: *voxel_size_m0
        anchor_args:
          cav_lidar_range: *cav_lidar_m0
          l: 3.9
          w: 1.6
          h: 1.56
          r: &anchor_yaw_m0 [0, 90]
          feature_stride: 2
          num: &anchor_num_m0 2
        target_args:
          pos_threshold: 0.6
          neg_threshold: 0.45
          score_threshold: 0.2
        order: 'hwl' # hwl or lwh
        max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
        nms_thresh: 0.15
        dir_args: &dir_args_m0
          dir_offset: 0.7853
          num_bins: 2
          anchor_yaw: *anchor_yaw_m0

    m4:
      sensor_type: &sensor_type_m4 'lidar'
      core_method: &core_method_m4 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m4 [0.4, 0.4, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: &cav_lidar_m4 [-102.4, -102.4, -3, 102.4, 102.4, 1] 

      postprocess:
        core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
        gt_range: *cav_lidar_m4
        voxel_size: *voxel_size_m4
        anchor_args:
          cav_lidar_range: *cav_lidar_m4
          l: 3.9
          w: 1.6
          h: 1.56
          r: &anchor_yaw_m4 [0, 90]
          feature_stride: 4
          num: &anchor_num_m4 2
        target_args:
          pos_threshold: 0.6
          neg_threshold: 0.45
          score_threshold: 0.2
        order: 'hwl' # hwl or lwh
        max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
        nms_thresh: 0.15
        dir_args: &dir_args_m4
          dir_offset: 0.7853
          num_bins: 2
          anchor_yaw: *anchor_yaw_m4



fusion:
  core_method: 'intermediateheteradapter'
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

# model related
model:
  core_method: collab_w_adapter
  args:
    stage: train_adapter_w_output
    crop_to_visible: true
    supervise_single: true
    ego_modality: *ego_modality
    protocol_modality: *protocol_modality
    heterogeneous: true

    m0:
      core_method: *core_method_m0
      sensor_type: *sensor_type_m0
      lidar_range: *cav_lidar_m0
      visible_range: [-102.4, -51.2, -3, 102.4, 51.2, 1]

      encoder_args:
        voxel_size: *voxel_size_m0
        lidar_range: *cav_lidar_m0
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
  
      aligner_args:
        core_method: identity

      fusion_method: pyramid

      fusion_backbone: 
        resnext: true
        layer_nums: [3, 5, 8]
        layer_strides: [1, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]
        anchor_number: *anchor_num_m0

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

      in_head: 256
      anchor_number: *anchor_num_m0
      dir_args: *dir_args_m0
        
    m4:
      core_method: *core_method_m4
      sensor_type: *sensor_type_m4
      lidar_range: *cav_lidar_m4
      visible_range: [-140.8, -38.4, -3, 140.8, 38.4, 1]

      encoder_args:
        voxel_size: *voxel_size_m4
        lidar_range: *cav_lidar_m4
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3, 5, 8]
        layer_strides: [2, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]
  
      aligner_args:
        core_method: downsample
        args:
          kernal_size: [ 3 ]
          stride: [ 2 ]
          padding: [ 1 ]
          dim: [ 256 ]
          input_dim: 384 # 128 * 3

      adapter:
        core_method: adapterconvnext
        args:
          in_channels: 256
          out_channels: 64
          in_cav_lidar_range: *cav_lidar_m4
          out_cav_lidar_range: *cav_lidar_m0
          in_feature_shape: [128, 128]
          out_feature_shape: [256, 256]
          submodule_args:
            num_of_blocks: 3
            dim: 16

      reverter:
        core_method: adapterconvnext
        args:
          in_channels: 64
          out_channels: 256
          in_cav_lidar_range: *cav_lidar_m0
          out_cav_lidar_range: *cav_lidar_m4
          in_feature_shape: [256, 256]
          out_feature_shape: [128, 128]
          submodule_args:
            num_of_blocks: 3
            dim: 16


      fusion_backbone:
        transformer:
          encoder: &encoder_m4
            # number of fusion blocks per encoder layer
            num_blocks: 1
            # number of encoder layers
            depth: 3
            use_roi_mask: true
            use_RTE: &use_RTE_m4 false
            RTE_ratio: &RTE_ratio_m4 0 # 2 means the dt has 100ms interval while 1 means 50 ms interval
            # agent-wise attention
            cav_att_config: &cav_att_config_m4
              dim: 256
              use_hetero: true
              use_RTE: *use_RTE_m4
              RTE_ratio: *RTE_ratio_m4
              heads: 8
              dim_head: 32
              dropout: 0.3
            # spatial-wise attention
            pwindow_att_config: &pwindow_att_config_m4
              dim: 256
              heads: [16, 8, 4]
              dim_head: [16, 32, 64]
              dropout: 0.3
              window_size: [4, 8, 16]
              relative_pos_embedding: true
              fusion_method: 'split_attn'
            # feedforward condition
            feed_forward: &feed_forward_m4
              mlp_dim: 256
              dropout: 0.3
            sttf: &sttf_m4
              voxel_size: *voxel_size_m4
              downsample_rate: 4

      fusion_method: v2xvit 

      # head_method: point_pillar_object_detection_head
      in_head: 256
      anchor_number: *anchor_num_m4
      dir_args: *dir_args_m4


loss_adapter:
  core_method: adapter_loss
  args:
    alpha_P2M: 9.0
    alpha_M2P2M: 1.0
    alpha_M2P: 10.0

loss:
  m0:
    core_method: point_pillar_pyramid_loss
    args:
      pos_cls_weight: 2.0
      cls:
        type: 'SigmoidFocalLoss'
        alpha: 0.25
        gamma: 2.0
        weight: 1.0
      reg:
        type: 'WeightedSmoothL1Loss'
        sigma: 3.0
        codewise: true
        weight: 2.0
      dir:
        type: 'WeightedSoftmaxClassificationLoss'
        weight: 0.2
        args: *dir_args_m0
      depth:
        weight: 1.0
      pyramid:
        relative_downsample: [1, 2, 4]
        weight: [0.4, 0.2, 0.1]
        
  m4:
    core_method: point_pillar_loss
    args:
      pos_cls_weight: 2.0
      cls:
        type: 'SigmoidFocalLoss'
        alpha: 0.25
        gamma: 2.0
        weight: 1.0
      reg:
        type: 'WeightedSmoothL1Loss'
        sigma: 3.0
        codewise: true
        weight: 2.0
      dir:
        type: 'WeightedSoftmaxClassificationLoss'
        weight: 0.2
        args: *dir_args_m4

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [3, 4]


