name: Pyramid_m1
root_dir: "dataset/OPV2V/train"
validate_dir: "dataset/OPV2V/validate"
test_dir: "dataset/OPV2V/test"

yaml_parsers:   
  m0: "load_general_params"
  m1: "load_general_params"
  
train_params:
  batch_size: &batch_size 1
  epoches: 5
  eval_freq: 1
  save_freq: 1
  max_cav: 5

comm_range: 70
input_source: ['lidar', 'camera', 'depth']
label_type: 'lidar'
# cav_lidar_range: &cav_lidar [-102.4, -51.2, -3, 102.4, 51.2, 1] 

add_data_extension: ['bev_visibility.png']


heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m1"
  protocol_modality: &protocol_modality "m0"
  mapping_dict:
    m1: m1
    m2: m1
    m3: m1
    m4: m1
  modality_setting:
    m0:
      sensor_type: &sensor_type_m0 'lidar'
      core_method: &core_method_m0 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m0 [0.4, 0.4, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: &cav_lidar_m0 [-102.4, -102.4, -3, 102.4, 102.4, 1]

      postprocess:
        core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
        gt_range: *cav_lidar_m0
        voxel_size: *voxel_size_m0
        anchor_args:
          cav_lidar_range: *cav_lidar_m0
          l: 3.9
          w: 1.6
          h: 1.56
          r: &anchor_yaw_m0 [0, 90]
          feature_stride: 2
          num: &anchor_num_m0 2
        target_args:
          pos_threshold: 0.6
          neg_threshold: 0.45
          score_threshold: 0.2
        order: 'hwl' # hwl or lwh
        max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
        nms_thresh: 0.15
        dir_args: &dir_args_m0
          dir_offset: 0.7853
          num_bins: 2
          anchor_yaw: *anchor_yaw_m0

    m1:
      sensor_type: &sensor_type_m1 'camera'
      core_method: &core_method_m1 "lift_splat_shoot"

      grid_conf: &grid_conf_m1
        xbound: [-51.2, 51.2, 0.4]   # Limit the range of the x direction and divide the grids
        ybound: [-51.2, 51.2, 0.4]   # Limit the range of the y direction and divide the grids
        zbound: [-10, 10, 20.0]   # Limit the range of the z direction and divide the grids
        ddiscr: [2, 50, 48]
        mode: 'LID'
      data_aug_conf: &data_aug_conf_m1
        resize_lim: [0.65, 0.7]
        final_dim: [384, 512]
        rot_lim: [-3.6, 3.6]
        H: 600
        W: 800
        rand_flip: False
        bot_pct_lim: [0.0, 0.05]
        cams: ['camera0', 'camera1', 'camera2', 'camera3']
        Ncams: 4

      postprocess:
        core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
        gt_range: &cav_lidar_m1 [-102.4, -102.4, -3, 102.4, 102.4, 1]
        voxel_size: &voxel_size_m1 [0.4, 0.4, 4]
        anchor_args:
          cav_lidar_range: *cav_lidar_m1
          l: 3.9
          w: 1.6
          h: 1.56
          r: &anchor_yaw_m1 [0, 90]
          feature_stride: 2
          num: &anchor_num_m1 2
        target_args:
          pos_threshold: 0.6
          neg_threshold: 0.45
          score_threshold: 0.2
        order: 'hwl' # hwl or lwh
        max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
        nms_thresh: 0.15
        dir_args: &dir_args_m1
          dir_offset: 0.7853
          num_bins: 2
          anchor_yaw: *anchor_yaw_m1


fusion:
  core_method: 'intermediateheteradapter'
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder


# model related
model:
  core_method: collab_w_adapter
  args:
    stage: train_adapter_w_output
    crop_to_visible: true
    supervise_single: true
    ego_modality: *ego_modality
    protocol_modality: *protocol_modality
    heterogeneous: true

    m0:
      core_method: *core_method_m0
      sensor_type: *sensor_type_m0
      lidar_range: *cav_lidar_m0

      encoder_args:
        voxel_size: *voxel_size_m0
        lidar_range: *cav_lidar_m0
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
  
      aligner_args:
        core_method: identity

      fusion_method: pyramid

      fusion_backbone: 
        resnext: true
        layer_nums: [3, 5, 8]
        layer_strides: [1, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]
        anchor_number: *anchor_num_m0

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

      in_head: 256
      anchor_number: *anchor_num_m0
      dir_args: *dir_args_m0
        
    m1:
      core_method: *core_method_m1
      sensor_type: *sensor_type_m1
      lidar_range: *cav_lidar_m1
      visible_range: [-51.2, -51.2, -3, 51.2, 51.2, 1]

      encoder_args:
        anchor_number: *anchor_num_m1
        grid_conf: *grid_conf_m1
        data_aug_conf: *data_aug_conf_m1
        img_downsample: 8
        img_features: &img_feature 128
        use_depth_gt: false
        depth_supervision: true
        camera_encoder: EfficientNet

      camera_mask_args:
        cav_lidar_range: *cav_lidar_m1
        grid_conf: *grid_conf_m1

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
        inplanes: 128
  
      aligner_args:
        core_method: identity

      adapter:
        core_method: adapterconvnext
        args:
          in_channels: 64
          out_channels: 64
          in_cav_lidar_range: *cav_lidar_m1
          out_cav_lidar_range: *cav_lidar_m0
          in_feature_shape: [256, 256]
          out_feature_shape: [256, 256]
          submodule_args:
            num_of_blocks: 2
            dim: 64

      reverter:
        core_method: adapterconvnext
        args:
          in_channels: 64
          out_channels: 64
          in_cav_lidar_range: *cav_lidar_m0
          out_cav_lidar_range: *cav_lidar_m1
          in_feature_shape: [256, 256]
          out_feature_shape: [256, 256]
          submodule_args:
            num_of_blocks: 2
            dim: 64

      fusion_method: pyramid 

      fusion_backbone: 
        resnext: true
        layer_nums: [3, 5, 8]
        layer_strides: [1, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]
        anchor_number: *anchor_num_m1

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

      in_head: 256
      anchor_number: *anchor_num_m1
      dir_args: *dir_args_m1

loss_adapter:
  core_method: adapter_loss
  args:
    alpha_P2M: 9.0
    alpha_M2P2M: 1.0
    alpha_M2P: 10.0

loss:
  m0:
    core_method: point_pillar_pyramid_loss
    args:
      pos_cls_weight: 2.0
      cls:
        type: 'SigmoidFocalLoss'
        alpha: 0.25
        gamma: 2.0
        weight: 1.0
      reg:
        type: 'WeightedSmoothL1Loss'
        sigma: 3.0
        codewise: true
        weight: 2.0
      dir:
        type: 'WeightedSoftmaxClassificationLoss'
        weight: 0.2
        args: *dir_args_m0
      depth:
        weight: 1.0
      pyramid:
        relative_downsample: [1, 2, 4]
        weight: [0.4, 0.2, 0.1]
  m1:
    core_method: point_pillar_pyramid_loss
    args:
      pos_cls_weight: 2.0
      cls:
        type: 'SigmoidFocalLoss'
        alpha: 0.25
        gamma: 2.0
        weight: 1.0
      reg:
        type: 'WeightedSmoothL1Loss'
        sigma: 3.0
        codewise: true
        weight: 2.0
      dir:
        type: 'WeightedSoftmaxClassificationLoss'
        weight: 0.2
        args: *dir_args_m1
      depth:
        weight: 1.0
      pyramid:
        relative_downsample: [1, 2, 4]
        weight: [0.4, 0.2, 0.1]


optimizer:
  core_method: Adam
  lr: 0.01
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [1,2,3,4]

